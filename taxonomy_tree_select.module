<?php
// $Id$


/**
 * Implementation of hook_form_alter().
 */
function taxonomy_tree_select_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
  // Work on vocabulary settings form
  $form['settings']['tags']['#weight'] = $form['settings']['tags']['#weight'] ? $form['settings']['tags']['#weight'] : -2;
  $form['settings']['taxonomy_tree_select'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tree select'),
    '#description' => t('On node form, shows a selectable tree with items of this vocabulary. (Incompatible with "Tags" option)'),
    '#weight' => $form['settings']['tags']['#weight'] + 1,
    '#default_value' => variable_get('vocabulary_' . $form['vid']['#value'] . '_tree_select', 0)
  );
}

/**
 * Implementation of hook_taxonomy().
 */
function taxonomy_tree_select_taxonomy($op, $type, $form_values) {
  if ($type = 'vocabulary') {
    switch ($op) {
      case 'insert':
      case 'update':
        $key = 'vocabulary_' . $form_values['vid'] . '_tree_select';
        $value = $form_values['taxonomy_tree_select'];
        if ($value) {
          variable_set($key, $value);
        }
        elseif (variable_get($key)) {
          variable_del($key);
        }
        break;
      case 'delete':
        variable_del($key);
        break;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function taxonomy_tree_select_form_alter(&$form, &$form_state, $form_id) {
  global $theme;

  // Work on node form...
  if ($form['#id'] == 'node-form' && $form['taxonomy']) {
    foreach ($form['taxonomy'] as $key => $vocabulary) {
      $tree_select = variable_get('vocabulary_' . $key . '_tree_select', 0);
      if (is_array($vocabulary) && $tree_select) {
        $safe_terms = _taxonomy_tree_select_taxonomy_format_tree(taxonomy_get_tree($key), 0);

        // Prepare one vocabulary to be passed to javascript
        $treeded_vocabularies[$key] = array(
          'id' => $key,
          'terms' => $safe_terms,
          'multiple' => $vocabulary['#multiple']
        );

        // Add an custom class based on theme in use
        $treeded_vocabularies[$key]['classes'][] = 'taxonomy-tree-' . $theme;
      }
    }

    // If is there some vocabulary to be added into javascript setting
    if (count($treeded_vocabularies)) {
      $javascript_settings['taxonomyTreeSelect'] = $treeded_vocabularies;

      drupal_add_js($javascript_settings, 'setting');
      drupal_add_js(drupal_get_path('module', 'taxonomy_tree_select') . '/taxonomy_tree_select.js');
      drupal_add_css(drupal_get_path('module', 'taxonomy_tree_select') . '/taxonomy_tree_select.css');
    }
  }
}

/**
 * Put terms in a nested array.
 *
 * @param $terms
 *   A string containing an email address.
 *
 * @return
 *   Array with the terms and each of it's children
 */
function _taxonomy_tree_select_taxonomy_format_tree($terms = array(), $parent = 0, $tree_temp = array()) {
  foreach ($terms as $term) {
    if ($term->parents[0] == $parent) {
      // Since this array will be send to javascript,
      // is good that it contains less data as possible
      // (nothing more than tid, name and subterms)
      $safe_terms[$term->tid] = array(
        'tid' => $term->tid,
        'name' => $term->name
      );
    }
    else {
      $tree_temp[$term->parents[0]][$term->tid] = $term;
    }
  }

  foreach ($safe_terms as &$term) {
    if (isset($tree_temp[$term['tid']])) {
      $term['terms'] = _taxonomy_tree_select_taxonomy_format_tree($tree_temp[$term['tid']], $term['tid'], $tree_temp);
    }
  }
  return $safe_terms;
}
