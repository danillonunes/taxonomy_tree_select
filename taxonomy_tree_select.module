<?php

/**
 * Implements hook_field_widget_info().
 */
function taxonomy_tree_select_field_widget_info() {
  return array(
    'taxonomy_tree_select' => array(
      'label' => t('Tree Select'),
      'field types' => array('taxonomy_term_reference'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function taxonomy_tree_select_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;

  $properties = array(
    'filter_xss' => FALSE,
    'strip_tags' => FALSE,
    'empty_option' => FALSE,
    'optgroups' => FALSE,
  );

  // Get a list of options.
  $options = _options_get_options($field, $instance, $properties);

  if ($multiple && count($options) > 1) {
    $element['#type'] = 'checkboxes';
  }
  else {
    $element['#type'] = 'radios';
  }

  foreach ($options as $key => &$option) {
    $term = taxonomy_term_load($key);
    if (is_object($term)) {
      $options[$term->tid] = $term->name;
    }
  }

  $element['#options'] = $options;

  return $element;
}

/**
 * Implements hook_theme().
 */
function taxonomy_tree_select_theme($existing, $type, $theme, $path) {
  return array(
    'taxonomy_tree_select_nested_lists' => array(
      'variables' => array('element' => NULL, 'tree' => NULL, 'parent' => NULL, 'tree_temp' => NULL),
    ),
  );
}

/**
 * Render terms in nested lists.
 *
 * @param $element
 *   A array with the form api element of taxonomy terms.
 *
 * @param $tree
 *   A array with the terms generated by taxonomy_get_tree().
 *
 * @param $parent
 *   A numeric value of the tid of the term from the tree should start.
 *   For internal use only.
 *
 * @param $tree_temp
 *   A array with temporary tree for internal use only.
 *
 * @return
 *   Rendered item list with the terms of the element
 */
function theme_taxonomy_tree_select_nested_lists($variables) {
  $element = $variables['element'];
  $tree = $variables['tree'];
  $parent = $variables['parent'];
  $tree_temp = $variables['tree_temp'];
  global $theme;

  $vid = $element['#parents'][1];

  if (!$tree) {
    $tree = taxonomy_get_tree($vid);
  }
  $list = array();

  foreach ($tree as $term) {
    if ($term->parents[0] == $parent) {

      // @TODO: Make some way to translate the term name / integration with Internationalization UI module
      $element[$term->tid]['#title'] = $term->name;

      $terms[$term->tid] = array(
        'data' => drupal_render_children($element[$term->tid]),
      );
    }
    else {
      $tree_temp[$term->parents[0]][$term->tid] = $term;
    }
  }

  if (is_array($terms)) {
    foreach ($terms as $tid => &$term) {
      if (isset($tree_temp[$tid])) {
        $term['children'] = theme_taxonomy_tree_select_nested_lists($element, $tree_temp[$tid], $tid, $tree_temp);

        $term['class'] = 'expansable expanded';
      }
      else {
        $term['class'] = 'leaf';
      }
    }
  }

  if ($parent) {
    return $terms;
  }
  else {
    $tree_classes[] = 'taxonomy-tree';
    $tree_classes[] = sprintf('taxonomy-tree-theme-%s', $theme);

    // There's no user interface for this option, you can by enable it by
    // manually add an variable vocabulary_%vid_tree_select_show_input
    // with the value 0.
    if (!variable_get('vocabulary_' . $vid . '_tree_select_show_input', 1)) {
      $tree_classes[] = 'taxonomy-tree-hidden-input';
    }

    return theme('item_list', array('items' => $terms, 'title' => NULL, 'type' => 'ul', 'attributes' => array('class' => implode(' ', $tree_classes))));
  }
}

/**
 * Add external files.
 *
 * This is done in a after build function to make sure this files will be
 * loaded even when the hook_form_alter doesn't run (i.e. in a form error).
 */
function _taxonomy_tree_select_add_external_files($form, $form_state) {
  drupal_add_css(drupal_get_path('module', 'taxonomy_tree_select') . '/taxonomy_tree_select.css');
  drupal_add_js(drupal_get_path('module', 'taxonomy_tree_select') . '/taxonomy_tree_select.js');

  return $form;
}
